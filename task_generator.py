import pandas as pd
import openai
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
import configparser


config = configparser.ConfigParser()
config.read('config.ini')

api_key = config['openai']['api_key']
openai.api_key = api_key

raw_dialogs_csv = config['files']['input_file']
final_csv = config['files']['output_file']

model = config['openai']['model']

def normalize_text(text: str):
    """
    Cleans and normalizes a given Russian text string by performing the following operations:
    
    1. Removes timestamp-like patterns (e.g., [DD.MM.YYYY HH:MM:SS]).
    2. Removes trailing digits after sentence-ending punctuation marks.
    3. Removes all punctuation marks.
    4. Converts the text to lowercase.
    5. Tokenizes the text into individual words.
    6. Lemmatizes each token to its base form using a lemmatizer.
    7. Filters out Russian stopwords to remove unimportant words like conjunctions and prepositions.
    
    This function uses the NLTK (Natural Language Toolkit) for tokenization, lemmatization, and stopword removal.

    Parameters:
    - text (str): The input text that needs to be normalized.

    Returns:
    - str: The normalized version of the input text with stopwords removed, lemmatized tokens, and without any punctuation or extraneous symbols.
    """

    nltk.download('stopwords')
    nltk.download('punkt')
    nltk.download('wordnet')
    nltk.download('omw-1.4')

    stop_words = set(stopwords.words('russian'))
    lemmatizer = WordNetLemmatizer()

    text = re.sub(r'\[\d{2}.\d{2}.\d{4} \d{2}:\d{2}:\d{2}\]', '', text) 
    text = re.sub(r'([.!?])\s*\d+\s*$', r'\1', text)  
    text = re.sub(r'[^\w\s]', '', text)  
    text = text.lower()

    tokens = nltk.word_tokenize(text)
    lemmatized_tokens = [lemmatizer.lemmatize(token) for token in tokens]
    filtered_tokens = [token for token in lemmatized_tokens if token not in stop_words]
    normalized_text = ' '.join(filtered_tokens)

    return normalized_text


def generate_task(dialog_text: str):

    """
    This function generates a task for a CRM system based on a dialog between a manager and a client.
    
    Parameters:
    - dialog_text (str): The text of the dialog between the manager and the client. 
    
    Returns:
    - str: A concise and relevant CRM task generated by the LLM model based on the dialog.
    """

    prompt = """

    Ты старший менеджер, который работает с CRM системой своей компании. 
    Ниже текст диалога между тобой (менеджером) и клиентом 
    (После слова "менеджер" следуют слова менеджера. После слова "клиент" идут слова клиента. 
    Каждый из них говорит, пока не указана другая роль):
    
    "{dialog_text}"

    На основе диалога выше, напиши самую релевантную задачу для CRM системы, которая состоит из следующих параметров:
    1. Описание задачи: Кратко сформулируй тему запроса.
    2. Действие для менеджера: По пунктам напиши, что должен выполнить менеджер после диалога с клиентом.
    3. Приоритет задачи: Оцени срочность выполнения задачи на основе запроса клиента (высокий, средний, низкий).
    4. Дополнительная информация: Укажи любые дополнительные важные детали для выполнения задачи.
    5. Сроки: Укажи сроки задачи из текста (если не указано, напиши релевантный срок для задачи).

    Задача должна быть описана кратко и понятно. Не добавляй лишних описаний. 
    Если каких-то пунктов нет в тексте, сформулируй их на основе данного текста или укажи "Нет". Ответ напиши в формате json. 
    """

    response = openai.Completion.create(
        model=model, 
        messages=[
            {"role": "user", "content": prompt}
        ],
        max_tokens=200,
        temperature=0.5
    )

    return response['choices'][0]['message']['content'].strip()


def evaluate_task(dialog_text: str, task_text: str):
    """
    Evaluates the relevance of a task based on the provided dialog and task text.

    This function sends a prompt to the OpenAI API to assess the relevance of a task 
    given the context of a dialog and the details of the task. It generates a 
    relevance evaluation based on the provided input.

    Parameters:
    - dialog_text (str): The text of the dialog between a manager and a client. 
    - task_text (str): The text of the task that was generated based on the dialog. 

    Returns:
    - str: The relevance evaluation of the task, as generated by the OpenAI API.
    """

    prompt = """

    На основе текста "{dialog_text}"
    была поставлена задача ниже: {task_text}.
    Оцени ее релевантность и напиши только число от 0 до 10 без других слов. 
    """

    response = openai.Completion.create(
        model=model, 
        messages=[
            {"role": "user", "content": prompt}
        ],
        max_tokens=200,
        temperature=0.5
    )

    return response['choices'][0]['message']['content'].strip()


def main():
    df = pd.read_csv(raw_dialogs_csv)  

    # normalize texts
    df['cleaned_dialogue'] = df['dialog_text'].apply(normalize_text)
    
    # generate tasks
    df['crm_task'] = df['cleaned_dialogue'].apply(lambda x: generate_task(x))
    
    df['task_evaluation'] = df.apply(lambda row: evaluate_task(row['dialog_text'], row['crm_task']), axis=1)
    
    # upload CRM tasks to a new csv file
    df.to_csv(final_csv, index=False)


if __name__ == "__main__":
    main()
